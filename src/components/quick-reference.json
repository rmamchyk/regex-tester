[
    {
        "name": "Common Tokens",
        "items": [
            {
                "name": "A single character of: a, b or c",
                "matcher": "[abc]" 
            },
            {
                "name": "A character except: a, b or c",
                "matcher": "[^abc]"
            },
            {
                "name": "A character in the range: a-z",
                "matcher": "[a-z]"
            },
            {
                "name": "A character not in the range: a-z",
                "matcher": "[^a-z]"
            },
            {
                "name": "A character in the range: a-z or A-Z",
                "matcher": "[a-zA-Z]"
            },
            {
                "name": "Any single character",
                "matcher": "."
            },
            {
                "name": "Any whitespace character",
                "matcher": "\\s"
            },
            {
                "name": "Any non-whitespace character",
                "matcher": "\\S"
            },
            {
                "name": "Any digit",
                "matcher": "\\d"
            },
            {
                "name": "Any non-digit",
                "matcher": "\\D"
            },
            {
                "name": "Any word character",
                "matcher": "\\w"
            },
            {
                "name": "Any non-word character",
                "matcher": "\\W"
            },
            {
                "name": "Capture everything enclosed",
                "matcher": "(...)"
            },
            {
                "name": "Match either a or b",
                "matcher": "(a|b)"
            },
            {
                "name": "Match either a or b",
                "matcher": "(a|b)"
            },
            {
                "name": "Zero or one of a",
                "matcher": "a?" 
            },
            {
                "name": "Zero or more of a",
                "matcher": "a*" 
            },
            {
                "name": "One or more of a",
                "matcher": "a+" 
            },
            {
                "name": "Exactly 3 of a",
                "matcher": "a{3}" 
            },
            {
                "name": "3 or more of a",
                "matcher": "a{3,}" 
            },
            {
                "name": "Between 3 and 6 of a",
                "matcher": "a{3,6}" 
            },
            {
                "name": "Start of string",
                "matcher": "^" 
            },
            {
                "name": "End of string",
                "matcher": "$" 
            },
            {
                "name": "A word boundary",
                "matcher": "\\b" 
            },
            {
                "name": "Non-word boundary",
                "matcher": "\\B" 
            }
        ]
    },
    {
        "name": "General Tokens",
        "items": [
            {
                "name": "Newline",
                "matcher": "\\n",
                "description": "Matches a newline character"
            },
            {
                "name": "Carriage return",
                "matcher": "\\r",
                "description": "Matches a carriage return character, unicode character 2185."
            },
            {
                "name": "Tab",
                "matcher": "\\t",
                "description": "Matches a tab character. Historically, tab stops happen every 8 characters."
            },
            {
                "name": "Null character",
                "matcher": "\\0",
                "description": "Matches a null character, most often visually represented in unicode using U+2400."
            }
        ]
    },
    {
        "name": "Anchors",
        "items": [
            {
                "name": "Start of string",
                "matcher": "^",
                "description": "Matches the start of a string without consuming any characters. If multiline mode is used, this will also match immediately after a newline character.",
                "example": {
                    "pattern": "/^\\w+/",
                    "text": "start of string"
                }
            },
            {
                "name": "End of string",
                "matcher": "$",
                "description": "Matches the end of a string without consuming any characters. If multiline mode is used, this will also match immediately before a newline character.",
                "example": {
                    "pattern": "/\\w+$/",
                    "text": "end of string"
                }
            },
            {
                "name": "A word boundary",
                "matcher": "\\b",
                "description": "Matches, without consuming any characters, immediately between a character matched by \\w and a character not matched by \\w (in either order). It cannot be used to separate non words from words.",
                "example": {
                    "pattern": "/d\\b/g",
                    "text": "word boundaries are odd"
                }
            },
            {
                "name": "Non-word boundary",
                "matcher": "\\B",
                "description": "Matches, without consuming any characters, at the position between two characters matched by \\w.",
                "example": {
                    "pattern": "/r\\B/g",
                    "text": "regex is really cool"
                }
            }
        ]
    },
    {
        "name": "Meta Sequences",
        "items": [
            {
                "name": "Any single character",
                "matcher": ".",
                "description": "Matches any character other than newline (or including newline with the /s flag)",
                "example": {
                    "pattern": "/.+/",
                    "text": "a b c"
                }
            },
            {
                "name": "Any whitespace character",
                "matcher": "\\s",
                "description": "Matches any space, tab or newline character.",
                "example": {
                    "pattern": "/\\s/g",
                    "text": "any whitespace character"
                }
            },
            {
                "name": "Any non-whitespace character",
                "matcher": "\\S",
                "description": "Matches anything other than a space, tab or newline.",
                "example": {
                    "pattern": "/\\S+/g",
                    "text": "any non-whitespace"
                }
            },
            {
                "name": "Any digit",
                "matcher": "\\d",
                "description": "Matches any decimal digit. Equivalent to [0-9].",
                "example": {
                    "pattern": "/\\d/g",
                    "text": "one: 1, two: 2"
                }
            },
            {
                "name": "Any non-digit",
                "matcher": "\\D",
                "description": "Matches anything other than a decimal digit.",
                "example": {
                    "pattern": "/\\D+/g",
                    "text": "one: 1, two: 2"
                }
            },
            {
                "name": "Any word character",
                "matcher": "\\w",
                "description": "Matches any letter, digit or underscore. Equivalent to [a-zA-Z0-9_].",
                "example": {
                    "pattern": "/\\w+/g",
                    "text": "any word character"
                }
            },
            {
                "name": "Any non-word character",
                "matcher": "\\W",
                "description": "Matches anything other than a letter, digit or underscore.",
                "example": {
                    "pattern": "/\\W+/g",
                    "text": "not.a@word%character"
                }
            },
            {
                "name": "Vertical whitespace character",
                "matcher": "\\v",
                "description": "Matches newlines and vertical tabs. Works with Unicode. Vertical tabs can be inserted in some word processors using CMD/CTRL+ENTER.",
                "example": {
                    "pattern": "/(\\v)/",
                    "text": "line one<br/><br/>line two"
                }
            },
            {
                "name": "Match nth subpattern",
                "matcher": "\\n",
                "description": "Usually referred to as a `backreference`, this will match a repeat of the text captured in a previous set of parentheses. To reduce ambiguity one may also use `\\gn`, or `\\g{n}` where n is a digit.",
                "example": {
                    "pattern": "/(.)\\1/",
                    "text": "Repeated letters"
                }
            },
            {
                "name": "Match subpattern `name`",
                "matcher": "\\k<name>",
                "description": "Matches the text matched by a previously named capture group. Please note this feature is experimental in JavaScript and might not be supported by your browser.",
                "example": {
                    "pattern": "/(?<first>a+) and again (\\k<first>)/",
                    "text": "aaaa and again aaaa"
                }
            },
            {
                "name": "Hex character YYYY",
                "matcher": "\\uYYYY",
                "description": "Matches the unicode character with the given hex value. <a target=\"_blank\" href=\"http://unicode-table.com/en/\">Unicode Character Table</a>",
                "example": {
                    "pattern": "/\\u0025/",
                    "text": "%"
                }
            },
            {
                "name": "Hex character YY",
                "matcher": "\\xYY",
                "description": "Matches the 8-bit character with the given hex value. <a target=\"_blank\" href=\"http://unicode-table.com/en/\">Unicode Character Table</a>",
                "example": {
                    "pattern": "/\\x20/g",
                    "text": "match all spaces"
                }
            },
            {
                "name": "Octal character ddd",
                "matcher": "\\ddd",
                "description": "Matches the 8-bit character with the given octal value. <a target=\"_blank\" href=\"http://www.utf8-chartable.de/unicode-utf8-table.pl?utf8=oct\">Octal Character Table</a>",
                "example": {
                    "pattern": "/\\045/",
                    "text": "%"
                }
            },
            {
                "name": "Control character Y",
                "matcher": "\\cY",
                "description": "Matches ASCII characters typically associated with Control+A through Control+Z: \\x01 through \\x1A. <a target=\"_blank\" href=\"https://www.cs.tut.fi/~jkorpela/chars/c0.html\">ASCII control characters</a>",
                "example": {
                    "pattern": "/cI/",
                    "text": "horizontal<mark>&nbsp;&nbsp;&nbsp;&nbsp;</mark>tab"
                }
            },
            {
                "name": "Backspace character",
                "matcher": "[\\b]",
                "description": "Matches the backspace control character."
            },
            {
                "name": "Makes any character literal",
                "matcher": "\\",
                "description": "This may be used to match the literal value of any metacharacter, or the / delimiter.",
                "example": {
                    "pattern": "/\\\\w/",
                    "text": "match \\w literally"
                }
            }
        ]
    },
    {
        "name": "Quantifiers",
        "items": [
            {
                "name": "Zero or one of a",
                "matcher": "a?" 
            },
            {
                "name": "Zero or more of a",
                "matcher": "a*" 
            },
            {
                "name": "One or more of a",
                "matcher": "a+" 
            },
            {
                "name": "Exactly 3 of a",
                "matcher": "a{3}" 
            },
            {
                "name": "3 or more of a",
                "matcher": "a{3,}" 
            },
            {
                "name": "Between 3 and 6 of a",
                "matcher": "a{3,6}" 
            },
            {
                "name": "Greedy quantifier",
                "matcher": "a*" 
            },
            {
                "name": "Lazy quantifier",
                "matcher": "a*?" 
            }
        ]
    },
    {
        "name": "Group Constructs",
        "items": [
            {
                "name": "Capture everything enclosed",
                "matcher": "(...)"
            },
            {
                "name": "Match either a or b",
                "matcher": "(a|b)"
            }, 
            {
                "name": "Match everything enclosed",
                "matcher": "(?:...)"
            }, 
            {
                "name": "Named Capturing Group",
                "matcher": "(?<name>...)"
            }, 
            {
                "name": "Positive Lookahead",
                "matcher": "(?=...)"
            }, 
            {
                "name": "Negative Lookahead",
                "matcher": "(?!...)"
            }, 
            {
                "name": "Positive Lookbehind",
                "matcher": "(?<=...)"
            }, 
            {
                "name": "Negative Lookbehind",
                "matcher": "(?<!...)"
            }
        ]
    },
    {
        "name": "Character Classes",
        "items": [
            {
                "name": "A single character of: a, b or c",
                "matcher": "[abc]" 
            },
            {
                "name": "A character except: a, b or c",
                "matcher": "[^abc]" 
            },
            {
                "name": "A character in the range: a-z",
                "matcher": "[a-z]"
            },
            {
                "name": "A character not in the range: a-z",
                "matcher": "[^a-z]"
            },
            {
                "name": "A character in the range: a-z or A-Z",
                "matcher": "[a-zA-Z]"
            } 
        ]
    },
    {
        "name": "Flags/Modifiers",
        "items": [
            {
                "name": "Global",
                "matcher": "g" 
            },
            {
                "name": "Multiline",
                "matcher": "m" 
            },
            {
                "name": "Case insensitive",
                "matcher": "i" 
            },
            {
                "name": "Sticky - searches in strings only from the index of the last match",
                "matcher": "y" 
            },
            {
                "name": "Enable unicode support",
                "matcher": "u" 
            }
        ]
    },
    {
        "name": "Substitution",
        "items": [
            {
                "name": "Contents in capture group 1",
                "matcher": "$1" 
            },
            {
                "name": "Contents before match",
                "matcher": "$`" 
            },
            {
                "name": "Contents after match",
                "matcher": "$'" 
            },
            {
                "name": "Complete match contents",
                "matcher": "$&" 
            },
            {
                "name": "Hexadecimal replacement values",
                "matcher": "\\x20" 
            },
            {
                "name": "Hexadecimal replacement values",
                "matcher": "\\x{06fa}" 
            },
            {
                "name": "Tab",
                "matcher": "\\t" 
            },
            {
                "name": "Carriage return",
                "matcher": "\\r" 
            },
            {
                "name": "Newline",
                "matcher": "\\n" 
            },
            {
                "name": "Form-feed",
                "matcher": "\\f" 
            },
            {
                "name": "Uppercase Transformation",
                "matcher": "\\U" 
            },
            {
                "name": "Lowercase Transformation",
                "matcher": "\\L" 
            },
            {
                "name": "Terminate any Transformation",
                "matcher": "\\E" 
            }
        ]
    }
]